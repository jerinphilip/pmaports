From 1cc0d3363932d840cee0b18d742a930f17e10fd8 Mon Sep 17 00:00:00 2001
From: Jerin Philip <jerinphilip@live.in>
Date: Mon, 11 Sep 2023 03:49:45 +0530
Subject: [PATCH 4/7] `find_best_idle_cpu`: Move defn before usage

---
 kernel/sched/eas_plus.c | 93 +++++++++++++++++++++--------------------
 1 file changed, 47 insertions(+), 46 deletions(-)

diff --git a/kernel/sched/eas_plus.c b/kernel/sched/eas_plus.c
index cb3b9bc26ce3..57e67b0861ec 100755
--- a/kernel/sched/eas_plus.c
+++ b/kernel/sched/eas_plus.c
@@ -104,6 +104,53 @@ static int is_tiny_task(struct task_struct *p)
 	return 0;
 }
 
+
+/*
+ * @p: the task want to be located at.
+ *
+ * Return:
+ *
+ * cpu id or
+ * -1 if target CPU is not found
+ */
+int find_best_idle_cpu(struct task_struct *p, bool prefer_idle)
+{
+	int iter_cpu;
+	int best_idle_cpu = -1;
+	struct cpumask *tsk_cpus_allow = tsk_cpus_allowed(p);
+	struct hmp_domain *domain;
+
+	for_each_hmp_domain_L_first(domain) {
+		for_each_cpu(iter_cpu, &domain->possible_cpus) {
+
+			/* tsk with prefer idle to find bigger idle cpu */
+			int i = ((prefer_idle &&
+				(task_util(p) > stune_task_threshold)))
+				?  nr_cpu_ids-iter_cpu-1 : iter_cpu;
+
+			if (!cpu_online(i) || cpu_isolated(i) ||
+					!cpumask_test_cpu(i, tsk_cpus_allow))
+				continue;
+
+#ifdef CONFIG_MTK_SCHED_INTEROP
+			if (cpu_rq(i)->rt.rt_nr_running &&
+					likely(!is_rt_throttle(i)))
+				continue;
+#endif
+
+			/* favoring tasks that prefer idle cpus
+			 * to improve latency.
+			 */
+			if (idle_cpu(i)) {
+				best_idle_cpu = i;
+				break;
+			}
+		}
+	}
+
+	return best_idle_cpu;
+}
+
 static int
 __select_idle_sibling(struct task_struct *p, int prev_cpu, int new_cpu)
 {
@@ -191,52 +238,6 @@ int select_max_spare_capacity(struct task_struct *p, int target)
 		return task_cpu(p);
 }
 
-/*
- * @p: the task want to be located at.
- *
- * Return:
- *
- * cpu id or
- * -1 if target CPU is not found
- */
-int find_best_idle_cpu(struct task_struct *p, bool prefer_idle)
-{
-	int iter_cpu;
-	int best_idle_cpu = -1;
-	struct cpumask *tsk_cpus_allow = tsk_cpus_allowed(p);
-	struct hmp_domain *domain;
-
-	for_each_hmp_domain_L_first(domain) {
-		for_each_cpu(iter_cpu, &domain->possible_cpus) {
-
-			/* tsk with prefer idle to find bigger idle cpu */
-			int i = ((prefer_idle &&
-				(task_util(p) > stune_task_threshold)))
-				?  nr_cpu_ids-iter_cpu-1 : iter_cpu;
-
-			if (!cpu_online(i) || cpu_isolated(i) ||
-					!cpumask_test_cpu(i, tsk_cpus_allow))
-				continue;
-
-#ifdef CONFIG_MTK_SCHED_INTEROP
-			if (cpu_rq(i)->rt.rt_nr_running &&
-					likely(!is_rt_throttle(i)))
-				continue;
-#endif
-
-			/* favoring tasks that prefer idle cpus
-			 * to improve latency.
-			 */
-			if (idle_cpu(i)) {
-				best_idle_cpu = i;
-				break;
-			}
-		}
-	}
-
-	return best_idle_cpu;
-}
-
 /*
  * Add a system-wide over-utilization indicator which
  * is updated in load-balance.
-- 
2.42.0

